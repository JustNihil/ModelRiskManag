<?xml version="1.0" encoding="UTF-8"?>
<!--
*************************************************
	         AnyLogic Project File
*************************************************
-->
<AnyLogicWorkspace WorkspaceVersion="1.9" AnyLogicVersion="8.9.1.202408021040" AlpVersion="8.9.1">
<Model>
	<Id>1740651593999</Id>
	<Name><![CDATA[Model]]></Name>
	<EngineVersion>6</EngineVersion>
	<JavaPackageName><![CDATA[model]]></JavaPackageName>
	<ModelTimeUnit><![CDATA[Second]]></ModelTimeUnit>
	
	<Folders>
		
	</Folders>
	<ActiveObjectClasses>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1740651594002</Id>
			<Name><![CDATA[Main]]></Name>
			<AdditionalClassCode><![CDATA[ServerManager serverManager;


    @Override
    public void onStartup() {
        traceln("Initializing server...");
        serverManager = new ServerManager();


        serverManager.startServer();
    }
 
]]></AdditionalClassCode>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1740651594008</Id>
				<Name><![CDATA[1740651594008]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Параметр настройки:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1740729600000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1740651594005</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1740651594009</CurrentLevel>
			<ConnectionsId>1740651594003</ConnectionsId>
			<AgentLinks>
				<AgentLink>
					<Id>1740651594003</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>


			<Presentation>
				<Level>
					<Id>1740651594009</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>DIM_NON_CURRENT</LevelVisibility>


				</Level>
			</Presentation>

		</ActiveObjectClass>
	</ActiveObjectClasses>
	<DifferentialEquationsMethod>EULER</DifferentialEquationsMethod>
	<MixedEquationsMethod>RK45_NEWTON</MixedEquationsMethod>
	<AlgebraicEquationsMethod>MODIFIED_NEWTON</AlgebraicEquationsMethod>
	<AbsoluteAccuracy>1.0E-5</AbsoluteAccuracy>
	<FixedTimeStep>0.001</FixedTimeStep>
	<RelativeAccuracy>1.0E-5</RelativeAccuracy>
	<TimeAccuracy>1.0E-5</TimeAccuracy>
	<Frame>
		<Width>1000</Width>
		<Height>600</Height>
	</Frame>
	<Database>
		<Logging>false</Logging>
		<AutoExport>false</AutoExport>
		<ShutdownCompact>false</ShutdownCompact>
		<ImportSettings>
		</ImportSettings>
		<ExportSettings>
		</ExportSettings>
	</Database>

	<RunConfiguration ActiveObjectClassId="1740651594002">
		<Id>1740651594014</Id>
		<Name><![CDATA[RunConfiguration]]></Name>
		<MaximumMemory>512</MaximumMemory>
		<ModelTimeProperties>
			<StopOption><![CDATA[Stop at specified time]]></StopOption>
			<InitialDate><![CDATA[1740614400000]]></InitialDate>	
			<InitialTime><![CDATA[0.0]]></InitialTime>	
			<FinalDate><![CDATA[1743033600000]]></FinalDate>	
			<FinalTime><![CDATA[100.0]]></FinalTime>	
		</ModelTimeProperties>
		<AnimationProperties>
			<StopNever>true</StopNever>
			<ExecutionMode>realTimeScaled</ExecutionMode>
			<RealTimeScale>1.0</RealTimeScale>
			<EnableZoomAndPanning>true</EnableZoomAndPanning>
			<EnableDeveloperPanel>false</EnableDeveloperPanel>
			<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
		</AnimationProperties>
		<Inputs>		
		</Inputs>
		<Outputs>
		</Outputs>
	</RunConfiguration>
	<Experiments>	
		<!--   =========   Simulation Experiment   ========  -->
		<SimulationExperiment ActiveObjectClassId="1740651594002">
			<Id>1740651594011</Id>
			<Name><![CDATA[Simulation]]></Name>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<MaximumMemory>512</MaximumMemory>
			<RandomNumberGenerationType>fixedSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>

			<Presentation>
				<Text>
					<Id>1740651594013</Id>
					<Name><![CDATA[text]]></Name>
					<X>50</X><Y>30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[Model]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>24</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Presentation>

			<Parameters>			
			</Parameters>			
			<PresentationProperties>
				<EnableZoomAndPanning>true</EnableZoomAndPanning>
				<ExecutionMode><![CDATA[realTimeScaled]]></ExecutionMode>
				<Title><![CDATA[Model : Simulation]]></Title>	
				<EnableDeveloperPanel>true</EnableDeveloperPanel>
				<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
				<RealTimeScale>1.0</RealTimeScale>
			</PresentationProperties>
			<ModelTimeProperties>
				<StopOption><![CDATA[Never]]></StopOption>
				<InitialDate><![CDATA[1740614400000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[1743033600000]]></FinalDate>	
				<FinalTime><![CDATA[100.0]]></FinalTime>	
			</ModelTimeProperties>
			<BypassInitialScreen>true</BypassInitialScreen>
		</SimulationExperiment>	
	</Experiments>
	<JavaClasses>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1740651656410</Id>
			<Name><![CDATA[ServerManager]]></Name>
			<Text><![CDATA[import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.eclipse.jetty.servlets.CrossOriginFilter;
import javax.servlet.DispatcherType;
import java.util.EnumSet;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import org.eclipse.jetty.servlet.FilterHolder;
import java.util.stream.Collectors;

public class ServerManager {
    ArrayList<Stage> stages = new ArrayList<>();
    ArrayList<Risk> risks = new ArrayList<>();
    double totalTime, totalCost, mitigationBudget;
    String mitigationStrategy;

    // Настройка PostgreSQL
    private static final String DB_URL = "jdbc:postgresql://localhost:5432/risk_db";
    private static final String DB_USER = "risk_user";
    private static final String DB_PASSWORD = "235521";
    private Connection dbConnection;

    class Stage {
        String name;
        double duration;
        double cost;
        Stage(String name, double duration, double cost) {
            this.name = name;
            this.duration = duration;
            this.cost = cost;
        }
    }

    static class Risk {
        String name;
        double probability;
        double impactTime;
        double impactCost;
        boolean mitigated;
        String strategy;

        Risk(String name, double probability, double impactTime, double impactCost) {
            this.name = name;
            this.probability = probability;
            this.impactTime = impactTime;
            this.impactCost = impactCost;
            this.mitigated = false;
            this.strategy = "Ignore";
        }

        Risk(String name, double probability, double impactTime, double impactCost, String strategy) {
            this.name = name;
            this.probability = probability;
            this.impactTime = impactTime;
            this.impactCost = impactCost;
            this.mitigated = false;
            this.strategy = strategy != null && !strategy.isEmpty() ? strategy : "Ignore";
        }
    }

    class Mitigation {
        String strategy;
        double budget;
    }

    private static final List<Risk> typicalRisks = Arrays.asList(
        new Risk("Задержка в разработке", 0.4, 10, 5000, "Mitigate"),
        new Risk("Отсутствие сотрудников", 0.3, 30, 10000, "Eliminate"),
        new Risk("Задержка поставки оборудования", 0.3, 15, 7000, "Mitigate"),
        new Risk("Неправильное планирование", 0.5, 20, 15000, "Mitigate"),
        new Risk("Кибератака", 0.2, 15, 20000, "Eliminate")
    );

    public ServerManager() {
        try {
            Class.forName("org.postgresql.Driver");
            dbConnection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            System.out.println("Connected to PostgreSQL successfully.");
        } catch (Exception e) {
            System.out.println("Error connecting to PostgreSQL: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public List<Risk> getTypicalRisks() { return typicalRisks; }

    public void startServer() {
        try {
            // Запуск Python HTTP-сервера
            String workingDirectory = "C:/Users/dmitr/Models";
            ProcessBuilder pb = new ProcessBuilder("python", "-m", "http.server", "8000");
            pb.directory(new java.io.File(workingDirectory));
            pb.redirectErrorStream(true);
            Process process = pb.start();

            // Читаем вывод Python-сервера для отладки
            new Thread(() -> {
                try (java.io.BufferedReader reader = new java.io.BufferedReader(
                        new java.io.InputStreamReader(process.getInputStream()))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        System.out.println("Python Server: " + line);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }).start();

            System.out.println("Python HTTP Server started on port 8000");

            // Запуск Jetty-сервера
            Server server = new Server(8080);
            ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);
            context.setContextPath("/");
            server.setHandler(context);

            // Настройка CORS
            configureCORS(context);

            context.addServlet(new ServletHolder(new CreateModelServlet()), "/create");
            context.addServlet(new ServletHolder(new AddRiskServlet()), "/addRisk");
            context.addServlet(new ServletHolder(new SetMitigationServlet()), "/mitigation");
            context.addServlet(new ServletHolder(new RunServlet()), "/run");
            context.addServlet(new ServletHolder(new ResultsServlet()), "/results");
            context.addServlet(new ServletHolder(new GetTypicalRisksServlet()), "/typicalRisks");
            context.addServlet(new ServletHolder(new ExportServlet()), "/export");

            server.start();
            System.out.println("Jetty Server started on port 8080");
        } catch (Exception e) {
            System.out.println("Error starting servers: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // Метод для настройки CORS
    private void configureCORS(ServletContextHandler context) {
        FilterHolder corsFilter = new FilterHolder(new CrossOriginFilter());
        corsFilter.setInitParameter(CrossOriginFilter.ALLOWED_ORIGINS_PARAM, "http://localhost:8000");
        corsFilter.setInitParameter(CrossOriginFilter.ALLOWED_METHODS_PARAM, "GET,POST,PUT,DELETE,OPTIONS");
        corsFilter.setInitParameter(CrossOriginFilter.ALLOWED_HEADERS_PARAM, "Content-Type,Authorization");
        corsFilter.setInitParameter(CrossOriginFilter.ALLOW_CREDENTIALS_PARAM, "true");
        corsFilter.setInitParameter(CrossOriginFilter.CHAIN_PREFLIGHT_PARAM, "false");
        context.addFilter(corsFilter, "/*", EnumSet.of(DispatcherType.REQUEST));
    }

    class CreateModelServlet extends HttpServlet {
        @Override
        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
            String json = req.getReader().lines().reduce("", (a, b) -> a + b);
            Gson gson = new Gson();
            List<Stage> inputStages = gson.fromJson(json, new TypeToken<List<Stage>>(){}.getType());
            if (inputStages != null && !inputStages.isEmpty()) {
                stages.addAll(inputStages);
                totalTime = stages.stream().mapToDouble(s -> s.duration).sum();
                totalCost = stages.stream().mapToDouble(s -> s.cost).sum();
                uploadToPostgreSQL();
                resp.getWriter().write("Модель создана с " + stages.size() + " этапами");
            } else {
                resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "Некорректные данные этапов");
            }
        }
    }

    class AddRiskServlet extends HttpServlet {
        @Override
        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
            String json = req.getReader().lines().reduce("", (a, b) -> a + b);
            Gson gson = new Gson();
            Risk risk = gson.fromJson(json, Risk.class);
            if (risk != null && risk.name != null && !risk.name.isEmpty() && 
                !Double.isNaN(risk.probability) && !Double.isNaN(risk.impactTime) && !Double.isNaN(risk.impactCost)) {
                if (risk.strategy == null || risk.strategy.isEmpty()) {
                    risk.strategy = "Ignore";
                }
                risks.add(risk);
                uploadToPostgreSQL();
                resp.getWriter().write("Риск добавлен: " + risk.name);
            } else {
                resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "Некорректные данные риска");
            }
        }
    }

    class SetMitigationServlet extends HttpServlet {
        @Override
        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
            String json = req.getReader().lines().reduce("", (a, b) -> a + b);
            Gson gson = new Gson();
            Mitigation mitigation = gson.fromJson(json, Mitigation.class);
            mitigationStrategy = mitigation.strategy;
            mitigationBudget = mitigation.budget;
            uploadToPostgreSQL();
            resp.getWriter().write("Стратегия установлена: " + mitigationStrategy);
        }
    }

    class RunServlet extends HttpServlet {
        @Override
        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
            double mitigationCost = 0;
            for (Risk risk : risks) {
                if (Math.random() < risk.probability) {
                    if ("Mitigate".equals(risk.strategy) && mitigationBudget >= 500) {
                        totalTime += risk.impactTime * 0.5;
                        totalCost += risk.impactCost * 0.5;
                        mitigationCost += 500;
                        risk.mitigated = true;
                        mitigationBudget -= 500;
                    } else if ("Eliminate".equals(risk.strategy) && mitigationBudget >= 2000) {
                        totalTime += 5;
                        totalCost += risk.impactCost;
                        mitigationCost += 2000;
                        risk.mitigated = true;
                        mitigationBudget -= 2000;
                    } else {
                        totalTime += risk.impactTime;
                        totalCost += risk.impactCost;
                    }
                }
            }
            totalCost += mitigationCost;
            uploadToPostgreSQL();
            resp.getWriter().write("Симуляция завершена. Стоимость управления: $" + mitigationCost);
        }
    }

    class ResultsServlet extends HttpServlet {
        @Override
        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
            Gson gson = new Gson();
            String json = gson.toJson(new Results(totalTime, totalCost, risks));
            resp.setContentType("application/json");
            resp.getWriter().write(json);
        }
    }

    class GetTypicalRisksServlet extends HttpServlet {
        @Override
        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
            Gson gson = new Gson();
            String json = gson.toJson(typicalRisks);
            resp.setContentType("application/json");
            resp.getWriter().write(json);
        }
    }

    class ExportServlet extends HttpServlet {
        @Override
        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
            Gson gson = new Gson();
            ExportData exportData = new ExportData(totalTime, totalCost, new ArrayList<>(stages), new ArrayList<>(risks), mitigationStrategy, mitigationBudget);
            String json = gson.toJson(exportData);
            resp.setContentType("application/json");
            resp.getWriter().write(json);
        }
    }

    class Results {
        double totalTime;
        double totalCost;
        List<Risk> risks;

        Results(double totalTime, double totalCost, List<Risk> risks) {
            this.totalTime = totalTime;
            this.totalCost = totalCost;
            this.risks = risks;
        }
    }

    class ExportData {
        double totalTime;
        double totalCost;
        List<Stage> stages;
        List<Risk> risks;
        String mitigationStrategy;
        double mitigationBudget;

        ExportData(double totalTime, double totalCost, List<Stage> stages, List<Risk> risks, String mitigationStrategy, double mitigationBudget) {
            this.totalTime = totalTime;
            this.totalCost = totalCost;
            this.stages = stages;
            this.risks = risks;
            this.mitigationStrategy = mitigationStrategy;
            this.mitigationBudget = mitigationBudget;
        }
    }

    private void uploadToPostgreSQL() {
        try {
            dbConnection.createStatement().execute("TRUNCATE TABLE project_metrics, stages, risks");

            String metricsSql = "INSERT INTO project_metrics (total_time, total_cost, mitigation_strategy, mitigation_budget) VALUES (?, ?, ?, ?)";
            PreparedStatement metricsStmt = dbConnection.prepareStatement(metricsSql);
            metricsStmt.setDouble(1, totalTime);
            metricsStmt.setDouble(2, totalCost);
            metricsStmt.setString(3, mitigationStrategy);
            metricsStmt.setDouble(4, mitigationBudget);
            metricsStmt.executeUpdate();

            String stageSql = "INSERT INTO stages (name, duration, cost) VALUES (?, ?, ?)";
            PreparedStatement stageStmt = dbConnection.prepareStatement(stageSql);
            for (Stage stage : stages) {
                stageStmt.setString(1, stage.name);
                stageStmt.setDouble(2, stage.duration);
                stageStmt.setDouble(3, stage.cost);
                stageStmt.executeUpdate();
            }

            String riskSql = "INSERT INTO risks (name, probability, impact_time, impact_cost, mitigated, strategy) VALUES (?, ?, ?, ?, ?, ?)";
            PreparedStatement riskStmt = dbConnection.prepareStatement(riskSql);
            for (Risk risk : risks) {
                riskStmt.setString(1, risk.name);
                riskStmt.setDouble(2, risk.probability);
                riskStmt.setDouble(3, risk.impactTime);
                riskStmt.setDouble(4, risk.impactCost);
                riskStmt.setBoolean(5, risk.mitigated);
                riskStmt.setString(6, risk.strategy);
                riskStmt.executeUpdate();
            }
        } catch (SQLException e) {
            System.out.println("Error uploading to PostgreSQL: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        ServerManager server = new ServerManager();
        server.startServer(); // Теперь оба сервера запускаются здесь
    }
}]]></Text>
		</JavaClass>
	</JavaClasses>
	<ModelResources>
		<Resource>
			<Path><![CDATA[jetty-all-9.4.31.v20200723-uber.jar]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
		<Resource>
			<Path><![CDATA[gson-2.8.9.jar]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
		<Resource>
			<Path><![CDATA[jetty-servlets-9.4.31.v20200723.jar]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
		<Resource>
			<Path><![CDATA[postgresql-42.6.0.jar]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
	</ModelResources>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[com.anylogic.libraries.modules.markup_descriptors]]></LibraryName>
		<VersionMajor>1</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[model]]></PackageName>
			<ClassName><![CDATA[gson-2.8.9.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[model]]></PackageName>
			<ClassName><![CDATA[jetty-servlets-9.4.31.v20200723.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[model]]></PackageName>
			<ClassName><![CDATA[jetty-all-9.4.31.v20200723-uber.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[model]]></PackageName>
			<ClassName><![CDATA[postgresql-42.6.0.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
</Model>
</AnyLogicWorkspace>